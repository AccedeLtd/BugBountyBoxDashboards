import { Component, Inject, OnInit } from '@angular/core';
import { VulnerabilitiesResponseJSON } from 'src/app/core/_models/vulnerabilitiesResponseJSON';
import { AdminService } from 'src/app/core/_services/admin.services';
import { NotificationService } from 'src/app/core/_services/notification.service';
import { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';
import { MatSnackBar } from '@angular/material/snack-bar';

@Component({
  selector: 'app-admin-vulnerability-dialog',
  templateUrl: './admin-vulnerability-dialog.component.html',
  styleUrls: ['./admin-vulnerability-dialog.component.css']
})
export class AdminVulnerabilityDialogComponent implements OnInit {
  vulnerability = {
    name: "",
    vulnerabilityTypeId: undefined
  };
  vulnerabilityInput?: {
    name: string,
    vulnerabilityTypeId: number
  };
  vulnResponse?: VulnerabilitiesResponseJSON;
  loadingVulnerabilityTypes: boolean = true;
  vulnerabilityTypes: any;

  constructor(
    private adminService: AdminService,
    private notifyService: NotificationService,
    private snackBar: MatSnackBar,
    @Inject(MAT_DIALOG_DATA) public data: any,
    private dialogRef: MatDialogRef<AdminVulnerabilityDialogComponent>
  ) { }

  ngOnInit(): void {
    this.getVulnerabilityTypes();
  }

  getVulnerabilityTypes(){
    this.loadingVulnerabilityTypes = true;
    this.adminService.getVulnerabilityTypes().subscribe({
      next: result => {
        this.vulnerabilityTypes = result.data;
        this.loadingVulnerabilityTypes = false;
      },
      error: () => {
        this.notifyService.showError("Something went wrong, please try again", "Error");
        this.loadingVulnerabilityTypes = false;
      }
    })
  }

  addVulnerabilityFromAdmin() {
    if (!this.vulnerability.name) {
      this.snackBar.open('Please enter vulnerability');
    }
    else if (!this.vulnerability.vulnerabilityTypeId) {
      this.snackBar.open('Please select vulnerability type');
    }
    else {
      this.vulnerabilityInput = {
        name: this.vulnerability.name,
        vulnerabilityTypeId: this.vulnerability.vulnerabilityTypeId
      }

      this.adminService.addVulnerabilitiesFromAdmin(this.vulnerabilityInput).subscribe(
        results => {
          if (results.success) {
            this.vulnResponse = results.result;
            this.notifyService.showSuccess('Vulnerability was added successfully', 'Congratulations');
            this.dialogRef.close({ data: this.vulnResponse })
          }
          if (!results.success) {
            this.notifyService.showError('Something went wrong adding vulnerability, please try again', 'Sorry');
          }
  
        }
      )
    }
  }

}
