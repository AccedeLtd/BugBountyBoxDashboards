import { Component, Inject, OnInit } from '@angular/core';
import { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';
import { MatSnackBar } from '@angular/material/snack-bar';
import { AdminService } from 'src/app/core/_services/admin.services';
import { NotificationService } from 'src/app/core/_services/notification.service';

@Component({
  selector: 'app-update-vulnerability',
  templateUrl: './update-vulnerability.component.html',
  styleUrls: ['./update-vulnerability.component.css']
})
export class UpdateVulnerabilityComponent implements OnInit {

  vulnerability = {
    name: "",
    vulnerabilityTypeId: undefined,
    type: ""
  };
  vulnerabilityTypes: any;
  loadingVulnerabilityTypes: boolean = true;

  constructor(
    @Inject(MAT_DIALOG_DATA) public data: number,
    private adminService:AdminService,
    private dialogRef: MatDialogRef<UpdateVulnerabilityComponent>,
    private notifyService:NotificationService,
    private snackBar: MatSnackBar,
  ) { }

  ngOnInit(): void {
    this.getVulnerabilityTypes();
    this.getVulnerability(); 
  }

  getVulnerabilityTypes(){
    this.loadingVulnerabilityTypes = true;
    this.adminService.getVulnerabilityTypes().subscribe({
      next: result => {
        this.vulnerabilityTypes = result.data;
        this.loadingVulnerabilityTypes = false;
      },
      error: () => {
        this.notifyService.showError("Something went wrong, please try again", "Error");
        this.loadingVulnerabilityTypes = false;
      }
    })
  }

  getVulnerability(){
    this.adminService.getVulnerabilityFromAdmin(this.data).subscribe(
      results => {
        this.vulnerability.name = results.result.name;
        this.vulnerability.vulnerabilityTypeId = results.result.vulnerabilityTypeId;
        this.vulnerability.type = results.result.type;
      }
    )
  }

  UpdateTheVulnerabilities(){
    if (!this.vulnerability.name) {
      this.snackBar.open('Please enter vulnerability name');
    }
    else if (!this.vulnerability.vulnerabilityTypeId) {
      this.snackBar.open('Please select vulnerability type');
    }
    else {
      const thedata = {
        id: this.data,
        name: this.vulnerability.name,
        vulnerabilityTypeId: parseInt(this.vulnerability.vulnerabilityTypeId),
        type: this.vulnerability.type
      }
      this.adminService.updateVulnerabilitiesFromAdmin(thedata).subscribe(
        results => {
          if (results.success) {
            this.notifyService.showSuccess('vulnerability was updated successfully', 'Congratulations');
            this.dialogRef.close({ data: results.result })
          }
          if (!results.success) {
            this.notifyService.showError('vulnerability was not updated successfully', 'Sorry');
          }
        }
      )
    }
  }

}
