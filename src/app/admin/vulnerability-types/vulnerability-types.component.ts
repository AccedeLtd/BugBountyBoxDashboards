import { Component, OnInit } from '@angular/core';
import { MatDialog } from '@angular/material/dialog';
import { OidcSecurityService } from 'angular-auth-oidc-client';
import { AdminService } from 'src/app/core/_services/admin.services';
import { AlertService } from 'src/app/core/_services/alert.service';
import { NotificationService } from 'src/app/core/_services/notification.service';
import { VulnerabilityTypeDialogComponent } from './vulnerability-type-dialog/vulnerability-type-dialog.component';

@Component({
  selector: 'app-vulnerability-types',
  templateUrl: './vulnerability-types.component.html',
  styleUrls: ['./vulnerability-types.component.css']
})
export class VulnerabilityTypesComponent implements OnInit {
  sideNavOpened = false;

  sections = [
    { id: '', title: 'Dashboard', active: false },
    { id: '/payments', child: '/payments/details', title: 'Payments', active: false },
    { id: '/bounties', title: 'Bounties', active: false },
    { id: '/clients', title: 'Clients', active: false },
    { id: '/vulnerabilities', title: 'Vulnerabilities', active: false },
    { id: '/bugs', child: '/bugsy/details', title: 'Bugs', active: false },
    { id: '/projects', child: '/projects/details', title: 'Projects', active: false },
    { id: '/hackers', child: '/bounty-activity/details', title: 'Hackers', active: false },
  ];
  
  user: any;
  authUser: any;
  userName: any;
  loadingVulnerabilityTypes: boolean = true;
  filteredString:string = '';
  totalCount?:number;
  pageSize:number = 5;
  page:number = 1;
  vulnerabilityTypes: any;

  constructor(
    public oidcSecurityService: OidcSecurityService,
    public alertService: AlertService,
    public notifyService: NotificationService,
    private adminService: AdminService,
    public dialog: MatDialog,
  ) {

  }

  ngOnInit(): void {
    this.getVulnerabilityTypes();
	}

  getVulnerabilityTypes(){
    this.loadingVulnerabilityTypes = true;
    this.adminService.getVulnerabilityTypes().subscribe({
      next: result => {
        this.vulnerabilityTypes = result.data;
        this.loadingVulnerabilityTypes = false;
      },
      error: () => {
        this.notifyService.showError("Something went wrong, please try again", "Error");
        this.loadingVulnerabilityTypes = false;
      }
    })
  }

  addVulnerabilityType() {
    let dialogRef = this.dialog.open(VulnerabilityTypeDialogComponent, {
      height: '550px',
      width: '600px',
    });

    dialogRef.afterClosed().subscribe(res => {
      if(res.data.name){
        this.vulnerabilityTypes.push(res.data); 
      }
    })
  }

  updateVulnerabilityType(id:number) {
    // let dialogRef = this.dialog.open(UpdateVulnerabilityComponent, {
    //   data:id,
    //   height: '500px',
    //   width: '600px',
    // });

    // dialogRef.afterClosed().subscribe(res => {
    //   // received data from dialog-component
    //   console.log(res.data);
    //   this.vulnerabilitTypes.forEach((e:any) => {
    //     if(e.id === res.data.id){
    //       e.type = res.data.type
    //     }
    //   })
    // })
  }

  deleteVulnerabilityType(id:number) {
    // this.alertService.confirm().then()

    // let dialogRef = this.dialog.open(DeleteVulnerabilityComponent, {
    //   data:id,  
    //   height: '500px',
    //   width: '600px',
    // });

    // dialogRef.afterClosed().subscribe(res => {
    //   // received data from dialog-component
    //   console.log(res.data);
    //   this.vulnerabilitTypes = this.vulnerabilitTypes.filter(e => e.id !== res.data);
    // })
  }

  toggleSideNav() {
    this.sideNavOpened = !this.sideNavOpened;
  }

  logout() {
    this.oidcSecurityService.logoff();
  }
}
